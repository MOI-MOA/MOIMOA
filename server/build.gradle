plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'b110'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	// lombok
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	// other dependencies
	compileOnly 'org.projectlombok:lombok:1.18.24'
	annotationProcessor 'org.projectlombok:lombok:1.18.24'
	testCompileOnly 'org.projectlombok:lombok:1.18.24'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
	
	// devtools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	// junit
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	// mysql
	runtimeOnly 'com.mysql:mysql-connector-j'
	// swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
	// redis
	implementation 'org.springframework.boot:spring-boot-starter-data-redis'
	testImplementation 'it.ozimov:embedded-redis:0.7.2'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	// sql query parameter log
	implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'
	// websocket
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	implementation 'org.webjars:stomp-websocket:2.3.4'
	implementation 'org.webjars:sockjs-client:1.5.1'
	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation 'com.querydsl:querydsl-sql'
	annotationProcessor 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	// Jakarta Annotations (필수)
	annotationProcessor 'jakarta.annotation:jakarta.annotation-api'
	annotationProcessor 'jakarta.persistence:jakarta.persistence-api'
	testImplementation 'org.springframework.security:spring-security-test'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	// Test코드에서 사용할 의존성
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	// assertJ 관련 의존성
	testImplementation("org.assertj:assertj-core:3.22.0")
	//jwt
	implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
	runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'
	//
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

}

tasks.named('test') {
	useJUnitPlatform()
}



/////////////////////////////////////////////////////////
// jenkins 테스트용 코드 //
//test {
//	// SimpleJenkinsTest만 실행하고 다른 테스트는 무시
//	filter {
//		includeTestsMatching "com.b110.jjeonchongmu.test.SimpleJenkinsTest"
//	}
//
//	// 테스트 출력 로그 표시
//	testLogging {
//		events "passed", "skipped", "failed", "standardOut", "standardError"
//		showStandardStreams = true
//	}
//
//	// 실패해도 빌드 계속 진행
//	ignoreFailures = true
//}
//
//// 컴파일 시 오류가 있어도 계속 진행
//tasks.withType(JavaCompile) {
//	options.failOnError = false
//}

// 특정 패키지만 컴파일하는 옵션 추가
if (project.hasProperty('includePackage')) {
	def includePackage = project.getProperty('includePackage')

	sourceSets {
		main {
			java {
				// 지정된 패키지만 포함
				include "**/${includePackage.replace('.', '/')}/**"

				// 메인 애플리케이션 클래스 항상 포함
				include "**/com/b110/jjeonchongmu/JjeonchongmuApplication.java"
			}
		}
	}

	tasks.withType(JavaCompile) {
		options.failOnError = false
	}

	test {
		// 모든 테스트 스킵
		enabled = false
	}
}
/////////////////////////////////////////////////////////
// 메인 클래스 명시적 지정
bootJar {
    mainClass.set("com.b110.jjeonchongmu.JjeonchongmuApplication")
}
